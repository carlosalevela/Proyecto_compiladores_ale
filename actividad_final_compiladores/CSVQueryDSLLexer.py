# Generated from CSVQueryDSL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,131,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,3,9,94,8,9,1,10,1,10,1,10,1,10,1,10,3,10,101,8,10,1,11,1,
        11,5,11,105,8,11,10,11,12,11,108,9,11,1,11,1,11,1,12,4,12,113,8,
        12,11,12,12,12,114,1,12,1,12,4,12,119,8,12,11,12,12,12,120,3,12,
        123,8,12,1,13,4,13,126,8,13,11,13,12,13,127,1,13,1,13,0,0,14,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        1,0,4,2,0,60,60,62,62,3,0,10,10,13,13,34,34,1,0,48,57,3,0,9,10,13,
        13,32,32,140,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,
        1,0,0,0,3,34,1,0,0,0,5,36,1,0,0,0,7,43,1,0,0,0,9,50,1,0,0,0,11,60,
        1,0,0,0,13,66,1,0,0,0,15,70,1,0,0,0,17,78,1,0,0,0,19,93,1,0,0,0,
        21,100,1,0,0,0,23,102,1,0,0,0,25,112,1,0,0,0,27,125,1,0,0,0,29,30,
        5,108,0,0,30,31,5,111,0,0,31,32,5,97,0,0,32,33,5,100,0,0,33,2,1,
        0,0,0,34,35,5,59,0,0,35,4,1,0,0,0,36,37,5,102,0,0,37,38,5,105,0,
        0,38,39,5,108,0,0,39,40,5,116,0,0,40,41,5,101,0,0,41,42,5,114,0,
        0,42,6,1,0,0,0,43,44,5,99,0,0,44,45,5,111,0,0,45,46,5,108,0,0,46,
        47,5,117,0,0,47,48,5,109,0,0,48,49,5,110,0,0,49,8,1,0,0,0,50,51,
        5,97,0,0,51,52,5,103,0,0,52,53,5,103,0,0,53,54,5,114,0,0,54,55,5,
        101,0,0,55,56,5,103,0,0,56,57,5,97,0,0,57,58,5,116,0,0,58,59,5,101,
        0,0,59,10,1,0,0,0,60,61,5,99,0,0,61,62,5,111,0,0,62,63,5,117,0,0,
        63,64,5,110,0,0,64,65,5,116,0,0,65,12,1,0,0,0,66,67,5,115,0,0,67,
        68,5,117,0,0,68,69,5,109,0,0,69,14,1,0,0,0,70,71,5,97,0,0,71,72,
        5,118,0,0,72,73,5,101,0,0,73,74,5,114,0,0,74,75,5,97,0,0,75,76,5,
        103,0,0,76,77,5,101,0,0,77,16,1,0,0,0,78,79,5,112,0,0,79,80,5,114,
        0,0,80,81,5,105,0,0,81,82,5,110,0,0,82,83,5,116,0,0,83,18,1,0,0,
        0,84,85,5,62,0,0,85,94,5,61,0,0,86,87,5,60,0,0,87,94,5,61,0,0,88,
        94,7,0,0,0,89,90,5,61,0,0,90,94,5,61,0,0,91,92,5,33,0,0,92,94,5,
        61,0,0,93,84,1,0,0,0,93,86,1,0,0,0,93,88,1,0,0,0,93,89,1,0,0,0,93,
        91,1,0,0,0,94,20,1,0,0,0,95,96,5,65,0,0,96,97,5,78,0,0,97,101,5,
        68,0,0,98,99,5,79,0,0,99,101,5,82,0,0,100,95,1,0,0,0,100,98,1,0,
        0,0,101,22,1,0,0,0,102,106,5,34,0,0,103,105,8,1,0,0,104,103,1,0,
        0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,109,1,0,
        0,0,108,106,1,0,0,0,109,110,5,34,0,0,110,24,1,0,0,0,111,113,7,2,
        0,0,112,111,1,0,0,0,113,114,1,0,0,0,114,112,1,0,0,0,114,115,1,0,
        0,0,115,122,1,0,0,0,116,118,5,46,0,0,117,119,7,2,0,0,118,117,1,0,
        0,0,119,120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,123,1,0,
        0,0,122,116,1,0,0,0,122,123,1,0,0,0,123,26,1,0,0,0,124,126,7,3,0,
        0,125,124,1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,
        0,128,129,1,0,0,0,129,130,6,13,0,0,130,28,1,0,0,0,8,0,93,100,106,
        114,120,122,127,1,6,0,0
    ]

class CSVQueryDSLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    OPERATOR = 10
    LOGICAL_OP = 11
    STRING = 12
    NUMBER = 13
    WS = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'load'", "';'", "'filter'", "'column'", "'aggregate'", "'count'", 
            "'sum'", "'average'", "'print'" ]

    symbolicNames = [ "<INVALID>",
            "OPERATOR", "LOGICAL_OP", "STRING", "NUMBER", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "OPERATOR", "LOGICAL_OP", "STRING", "NUMBER", 
                  "WS" ]

    grammarFileName = "CSVQueryDSL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


